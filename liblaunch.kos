@LAZYGLOBAL OFF.

RUNONCEPATH("libmaneuver.kos")
RUNONCEPATH("libcalc.kos")

FUNCTION launch {
	DECLARE PARAMETER alt0, alt1, pitch0.

	LOCK ship_max_acc TO SHIP:MAXTHRUST / SHIP:MASS.
	
	SET g_target TO 2.
	
	/////////////////////////////////////////////////////////
	// launch vertical with target acceleration of 2 G until
	// we reach an altitude of alt0
	
	SET thrott TO 1.
	LOCK THROTTLE TO thrott.
	LOCK STEERING TO HEADING(90,90).
	
	STAGE.
	WAIT 0.1.
	
	WHEN MAXTHRUST = 0 THEN {
		UNTIL MAXTHRUST > 0 { 
			STAGE.
			WAIT 0.5.
		}
	}.
	
	SET acc_surf TO SHIP:BODY:MU / SHIP:BODY:RADIUS^2.
	LOCK accvec TO SHIP:SENSORS:ACC - SHIP:SENSORS:GRAV.
	LOCK g TO accvec:MAG / acc_surf.
	LOCK dthrott TO 0.05 * (g_target - g).
	
	UNTIL ALTITUDE > alt0 {	
		SET thrott TO thrott + dthrott.
		WAIT 0.1.
	}
	
	/////////////////////////////////////////////////////////
	// Begin gravity turn
	//
	// Start by pitching to pitch0.
	// Then lock steering to surface prograde.
	// Once we reach sufficient altitude, switch steering to prograde.
	//
	// Calculate target speed based on target pitch-apoapsis relation.
	
	LOCK apo_target TO func_apo(alt1).
	LOCK v_target TO func_v(apo_target).
	LOCK dthrott TO 1.0 * (v_target - SHIP:VELOCITY:MAG).
	
	LOCK STEERING TO HEADING(90,pitch0).
	
	WHEN calc_pitch() < pitch0 THEN {
		LOCK STEERING TO SHIP:SRFPROGRADE.
	
		WHEN ALTITUDE > (alt1 / 2) THEN {
			LOCK STEERING TO SHIP:PROGRADE.
		}
	}
	
	UNTIL APOAPSIS > alt1 {
		SET thrott TO thrott + dthrott.
		
		WAIT 0.1.
		CLEARSCREEN.
		PRINT "ALT     " + ALTITUDE.
		PRINT "PITCH   " + calc_pitch().
		PRINT "APO     " + APOAPSIS.
		PRINT "APO TAR " + apo_target - SHIP:BODY:RADIUS.
		PRINT "V       " + SHIP:VELOCITY:MAG.
		PRINT "V TAR   " + v_target.
	}
	
	//////////////////////////////////////////////////////////
	// Circularize
	
	circularize_apo().
}	
	
