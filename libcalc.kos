@LAZYGLOBAL OFF.

RUNONCEPATH("libvessel.kos").

function func_r_2 {
	DECLARE PARAMETER r_e, r_1, f.
	
	return r_e * (r_e - r_1) / (r_e - f * r_1 ).
}
function func_a {
	DECLARE PARAMETER r_e.
	
	DECLARE LOCAL t to SHIP:VELOCITY:ORBIT:NORMALIZED.
	
	DECLARE LOCAL r_1_vec to -SHIP:BODY:POSITION.
	DECLARE LOCAL r_1_hat to r_1_vec:NORMALIZED.
	DECLARE LOCAL r_1 to r_1_vec:MAG.
	
	DECLARE LOCAL r_2_hat to r_1_hat - 2.0 * t * VDOT(t,r_1_hat).
	
	DECLARE LOCAL f to (1.0 + VDOT(r_1_hat,r_2_hat)) / 2.0.
	
	DECLARE LOCAL r_2 to func_r_2(r_e, r_1, f).

	DECLARE LOCAL a to (r_1 + r_2) / 2.0.

	return a.
}
function func_v {
	DECLARE PARAMETER r_e.
	
	DECLARE LOCAL a to func_a(r_e).
	DECLARE LOCAL r to SHIP:BODY:POSITION:MAG.
	
	//IF a = 0 {
	//PRINT "r_e " + r_e.
	//PRINT "a   " + a.
	//PRINT "r   " + r.
	//PRINT "    " + (2.0/r - 1.0/a).
	//}
	
	DECLARE LOCAL v to sqrt(SHIP:BODY:MU * (2.0/r - 1.0/a)).
	
	return v.
}
function func_apo {
	DECLARE PARAMETER alt0, alt1.
	
	DECLARE LOCAL a IS 1.0.
	
	DECLARE LOCAL r0 IS SHIP:BODY:RADIUS + alt0 + 1000.
	
	DECLARE LOCAL r1 IS SHIP:BODY:RADIUS + alt1 + 1000.
	
	DECLARE LOCAL t IS 90 - ship_pitch().
    DECLARE LOCAL x IS t / 90.
	DECLARE LOCAL y IS (1 - CONSTANT:E ^ (-a * x)) / (1 - CONSTANT:E ^ (-a)).
	RETURN r0 + (r1 - r0) * y.
}
function calc_v_circular {
	DECLARE PARAMETER alt.
	DECLARE LOCAL r to SHIP:BODY:RADIUS + alt.
	return sqrt(SHIP:BODY:MU / r).
}
function calc_v_at_alt {
	DECLARE PARAMETER alt.
	DECLARE LOCAL r to SHIP:BODY:RADIUS + alt.
	DECLARE LOCAL a to SHIP:OBT:SEMIMAJORAXIS.
	return sqrt(SHIP:BODY:MU * (2.0/r - 1.0/a)).
}



