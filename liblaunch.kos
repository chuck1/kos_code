@LAZYGLOBAL OFF.

RUNONCEPATH("libmaneuver.kos").
RUNONCEPATH("libcalc.kos").


FUNCTION launch {
	DECLARE PARAMETER alt0, alt1, pitch0.

	LOCK ship_max_acc TO SHIP:MAXTHRUST / SHIP:MASS.
	
	DECLARE LOCAL g_target IS 2.
	
	/////////////////////////////////////////////////////////
	// launch vertical with target acceleration of 2 G until
	// we reach an altitude of alt0
	
	DECLARE LOCAL thrott IS 1.
	LOCK THROTTLE TO thrott.
	LOCK STEERING TO HEADING(90,90).
	
	STAGE.
	WAIT 0.1.
	
	WHEN MAXTHRUST = 0 THEN {
		UNTIL MAXTHRUST > 0 { 
			STAGE.
			WAIT 0.5.
		}
	}.
	
	DECLARE LOCAL acc_surf IS SHIP:BODY:MU / SHIP:BODY:RADIUS^2.
	LOCK accvec TO SHIP:SENSORS:ACC - SHIP:SENSORS:GRAV.
	LOCK g TO accvec:MAG / acc_surf.
	LOCK dthrott TO 0.05 * (g_target - g).
	
	DECLARE LOCAL pid0 IS PIDLOOP(1,0.1,0.0,0,1).
	
	SET pid0:SETPOINT TO g_target.
	
	UNTIL ALTITUDE > alt0 {	
		SET thrott TO pid0:UPDATE(TIME:SECONDS, g).
		
		WAIT 0.1.
		CLEARSCREEN.
		PRINT "ALT     " + ALTITUDE.
		PRINT "PITCH   " + ship_pitch().
		PRINT "VPITCH  " + SHIP:VELOCITY:SURFACE:DIRECTION:PITCH.
	}
	
	/////////////////////////////////////////////////////////
	// Begin gravity turn
	//
	// Start by pitching to pitch0.
	// Then lock steering to surface prograde.
	// Once we reach sufficient altitude, switch steering to prograde.
	//
	// Calculate target speed based on target pitch-apoapsis relation.
	
	LOCK apo_target TO func_apo(alt0, alt1).
	LOCK v_target TO func_v(apo_target).
	//LOCK dthrott TO 0.001 * (v_target - SHIP:VELOCITY:ORBIT:MAG).
	
	DECLARE LOCAL pid TO PIDLOOP(0.1,0,0,0,1).
	
	LOCK STEERING TO HEADING(90,pitch0).
	
	WAIT 4.
	
	WHEN ship_pitch() < pitch0 THEN {
		LOCK STEERING TO SHIP:SRFPROGRADE.
		
		WHEN ALTITUDE > (alt1 * 2 / 3) THEN {
			LOCK STEERING TO SHIP:PROGRADE.
		}
	}
	
	UNTIL APOAPSIS > alt1 {
		SET pid:SETPOINT TO v_target.
		SET thrott TO pid:UPDATE(TIME:SECONDS, SHIP:VELOCITY:ORBIT:MAG).
		
		WAIT 0.1.
		CLEARSCREEN.
		PRINT "ALT       " + ALTITUDE.
		PRINT "PITCH     " + ship_pitch().
		PRINT "THROTTLE  " + THROTTLE.
		PRINT "APO       " + APOAPSIS.
		PRINT "APO TAR   " + (apo_target - SHIP:BODY:RADIUS).
		PRINT "V         " + SHIP:VELOCITY:ORBIT:MAG.
		PRINT "V TAR     " + v_target.
		PRINT "VEL ANGLE " + VANG(SHIP:VELOCITY:ORBIT:MAG,SHIP:VELOCITY:SURFACE:MAG).
	}
	
	//////////////////////////////////////////////////////////
	// Circularize
	
	circularize_apo().
}	
FUNCTION launch_match_inclination {
	lan
	SET l TO o:LONGITUDEOFASCENDINGNODE - (BODY:ROTATION + SHIP:GEOPOSITION:LNG).
}





	
